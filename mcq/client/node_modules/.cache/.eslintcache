[{"C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\index.js":"1","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\App.js":"2","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\reportWebVitals.js":"3","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\dump.jsx":"4","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\Home\\Home.jsx":"5","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\Navbar\\Navbar.jsx":"6","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\QuestionChoice\\QuestionChoice.jsx":"7"},{"size":419,"mtime":1688818415767,"results":"8","hashOfConfig":"9"},{"size":264,"mtime":1688640877228,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1688306002527,"results":"11","hashOfConfig":"9"},{"size":1805,"mtime":1688640992845,"results":"12","hashOfConfig":"9"},{"size":281,"mtime":1688650350816,"results":"13","hashOfConfig":"9"},{"size":998,"mtime":1688648907288,"results":"14","hashOfConfig":"9"},{"size":8469,"mtime":1688813484747,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sulesm",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\index.js",[],[],"C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\App.js",["42","43"],[],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./Components/Home/Home\";\nimport Dump from \"./Components/dump\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Dump /> */}\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n",[],"C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\dump.jsx",["44"],[],"import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  Text,\r\n  Container,\r\n} from \"@chakra-ui/react\";\r\nfunction Dump() {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Card>\r\n          <CardHeader>\r\n            <Heading size=\"md\">Lorem ipsum dolor sit amet.</Heading>\r\n          </CardHeader>\r\n\r\n          <CardBody>\r\n            <Flex align={\"center\"} justifyContent={\"space-between\"} spacing=\"4\">\r\n              <Box>\r\n                <Heading size=\"xs\" textTransform=\"uppercase\">\r\n                  Summary\r\n                </Heading>\r\n                <Text pt=\"2\" fontSize=\"sm\">\r\n                  View a summary of all your clients over the last month.\r\n                </Text>\r\n              </Box>\r\n              <Box>\r\n                <Heading size=\"xs\" textTransform=\"uppercase\">\r\n                  Overview\r\n                </Heading>\r\n                <Text pt=\"2\" fontSize=\"sm\">\r\n                  Check out the overview of your clients.\r\n                </Text>\r\n              </Box>\r\n              <Box>\r\n                <Heading size=\"xs\" textTransform=\"uppercase\">\r\n                  Analysis\r\n                </Heading>\r\n                <Text pt=\"2\" fontSize=\"sm\">\r\n                  See a detailed analysis of all your business clients.\r\n                </Text>\r\n              </Box>\r\n              <Box>\r\n                <Heading size=\"xs\" textTransform=\"uppercase\">\r\n                  Analysis\r\n                </Heading>\r\n                <Text pt=\"2\" fontSize=\"sm\">\r\n                  See a detailed analysis of all your business clients.\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n          </CardBody>\r\n        </Card>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dump;\r\n","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\Home\\Home.jsx",[],[],"C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\Navbar\\Navbar.jsx",["45","46","47","48","49","50","51","52","53","54","55","56"],[],"import { ReactNode } from \"react\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Avatar,\r\n  Link,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  MenuDivider,\r\n  useDisclosure,\r\n  useColorModeValue,\r\n  Stack,\r\n  useColorMode,\r\n  Center,\r\n} from \"@chakra-ui/react\";\r\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\n\r\nexport default function Navbar() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  return (\r\n    <>\r\n      <Box bg={useColorModeValue(\"gray.300\", \"gray.900\")} px={4}>\r\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\r\n          <Box>Quiz Time</Box>\r\n\r\n          <Flex alignItems={\"center\"}>\r\n            <Stack direction={\"row\"} spacing={7}>\r\n              <Button onClick={toggleColorMode}>\r\n                {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\r\n              </Button>\r\n            </Stack>\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\ins59\\OneDrive\\Documents\\mcq\\mcq\\client\\src\\Components\\QuestionChoice\\QuestionChoice.jsx",["57","58","59"],[],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  Text,\r\n  Container,\r\n  Button,\r\n  colorScheme,\r\n  Center,\r\n} from \"@chakra-ui/react\";\r\nfunction App() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    generateQuestions();\r\n  }, []);\r\n\r\n  const generateQuestions = () => {\r\n    fetch(\"http://localhost:8000/api/generate/\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => setQuestions(data))\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n        setQuestions([]);\r\n      });\r\n  };\r\n\r\n  const handleAnswerSelect = (questionId, selectedChoice) => {\r\n    const answer = { question_id: questionId, selected_choice: selectedChoice };\r\n    setUserAnswers((prevAnswers) => [...prevAnswers, answer]);\r\n\r\n    const question = questions.find((q) => q.id === questionId);\r\n    const isCorrect = selectedChoice === question.correct_choice;\r\n\r\n    if (isCorrect) {\r\n      console.log(\"Correct answer!\");\r\n\r\n      alert(\"Corect Answer\");\r\n    } else {\r\n      alert(\"Wrong Answer\");\r\n    }\r\n  };\r\n\r\n  const submitAnswers = () => {\r\n    fetch(\"http://localhost:8000/api/submit/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ user_answers: userAnswers }),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setScore(data.score);\r\n        setShowResult(true);\r\n      })\r\n      \r\n\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n        setScore(0);\r\n        setShowResult(true);\r\n      });\r\n  };\r\n  const startQuiz = () => {\r\n    setQuizStarted(true);\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"\">\r\n      {!quizStarted ? (\r\n        <Box mt={10}  height =\"60vh\" display={\"flex\"} alignItems={\"center\"} justifyContent={\"center\"}>\r\n          <Container mt={10}>\r\n            <Card backgroundColor={\"lightblue\"}>\r\n              <CardHeader>\r\n                <Heading size=\"md\" fontSize={\"3xl\"} mt={5} >\r\n                  Quiz\r\n                </Heading>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Button\r\n                  width={\"full\"}\r\n                  colorScheme=\"blue\"\r\n                  onClick={startQuiz}\r\n                >\r\n                  Start\r\n                </Button>\r\n              </CardBody>\r\n            </Card>\r\n          </Container>\r\n        </Box>\r\n\r\n      ): showResult ? (\r\n        <Box mt={10}>\r\n          {/* <Heading mt={5}></Heading> */}\r\n\r\n          <Container mt={10}>\r\n            <Card>\r\n              <CardHeader>\r\n                <Heading size=\"md\" fontSize={\"3xl\"} textAlign=\"center\" mt={5}>\r\n                  Result \r\n                </Heading>\r\n              </CardHeader>\r\n\r\n              <CardBody>\r\n                <Text fontSize={\"2xl\"}>\r\n                  {\" \"}\r\n                  Correct Answers: {score} / {questions.length}\r\n                </Text>\r\n                {score === questions.length ? (\r\n                <Text fontSize={\"2xl\"} color=\"green\">\r\n                  Cheers! You got all the answers correct!\r\n                </Text>\r\n              ) : (\r\n                <Text fontSize={\"2xl\"} color=\"red\">\r\n                  Oops! Better luck next time\r\n                </Text>\r\n              )}\r\n            \r\n              </CardBody>\r\n            </Card>\r\n          </Container>\r\n        </Box>\r\n      ) : (\r\n        <Box>\r\n          {questions.map((question) => (\r\n            <Container key={question.id} >\r\n              <Card mt={10}  mb={10} >\r\n                <CardHeader>\r\n                  <Heading size=\"md\">{question.question_text}</Heading>\r\n                </CardHeader>\r\n\r\n                <CardBody>\r\n                  <Flex\r\n                    align={\"center\"}\r\n                    justifyContent={\"space-between\"}\r\n                    spacing=\"4\"\r\n                  >\r\n                    <Box mb={5}>\r\n                      <Button\r\n                        onClick={() =>\r\n                          handleAnswerSelect(question.id, question.choice1)\r\n                        }\r\n                        colorScheme={\r\n                          userAnswers.find(\r\n                            (answer) =>\r\n                              answer.question_id === question.id &&\r\n                              answer.selected_choice === question.choice1\r\n                          )\r\n                            ? question.correct_choice === question.choice1\r\n                              ? \"green\"\r\n                              : \"red\"\r\n                            : undefined\r\n                        }\r\n  \r\n                      > \r\n        \r\n                        1. {question.choice1}\r\n                      </Button>\r\n                    </Box>\r\n                    <Box mb={5}>\r\n                      <Button\r\n                        onClick={() =>\r\n                          handleAnswerSelect(question.id, question.choice2)\r\n                        }\r\n                        colorScheme={\r\n                          userAnswers.find(\r\n                            (answer) =>\r\n                              answer.question_id === question.id &&\r\n                              answer.selected_choice === question.choice2\r\n                          )\r\n                            ? question.correct_choice === question.choice2\r\n                              ? \"green\"\r\n                              : \"red\"\r\n                            : undefined\r\n                        }\r\n                      >\r\n                        2. {question.choice2}\r\n                      </Button>\r\n                    </Box>\r\n                  </Flex>\r\n                  <Flex\r\n                    align={\"center\"}\r\n                    justifyContent={\"space-between\"}\r\n                    spacing=\"4\"\r\n                  >\r\n                    <Box mb={5}>\r\n                      <Button\r\n                        onClick={() =>\r\n                          handleAnswerSelect(question.id, question.choice3)\r\n                        }\r\n                        colorScheme={\r\n                          userAnswers.find(\r\n                            (answer) =>\r\n                              answer.question_id === question.id &&\r\n                              answer.selected_choice === question.choice3\r\n                          )\r\n                            ? question.correct_choice === question.choice3\r\n                              ? \"green\"\r\n                              : \"red\"\r\n                            : undefined\r\n                        }\r\n                      >\r\n                        3. {question.choice3}\r\n                      </Button>\r\n                    </Box>\r\n                    <Box mb={5}>\r\n                      <Button\r\n                        onClick={() =>\r\n                          handleAnswerSelect(question.id, question.choice4)\r\n                        }\r\n                        colorScheme={\r\n                          userAnswers.find(\r\n                            (answer) =>\r\n                              answer.question_id === question.id &&\r\n                              answer.selected_choice === question.choice4\r\n                          )\r\n                            ? question.correct_choice === question.choice4\r\n                              ? \"green\"\r\n                              : \"red\"\r\n                            : undefined\r\n                        }\r\n                      >\r\n                        4. {question.choice4}\r\n                      </Button>\r\n                    </Box>\r\n                  </Flex>\r\n                </CardBody>\r\n              </Card>\r\n            </Container>\r\n          ))}\r\n          <Container mb={20}>\r\n            <Button width={\"full\"} colorScheme=\"blue\" onClick={submitAnswers}>\r\n              Submit\r\n            </Button>\r\n          </Container>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"60","severity":1,"message":"61","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":12},{"ruleId":"60","severity":1,"message":"64","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":12},{"ruleId":"60","severity":1,"message":"65","line":6,"column":3,"nodeType":"62","messageId":"63","endLine":6,"endColumn":13},{"ruleId":"60","severity":1,"message":"66","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":19},{"ruleId":"60","severity":1,"message":"67","line":5,"column":3,"nodeType":"62","messageId":"63","endLine":5,"endColumn":9},{"ruleId":"60","severity":1,"message":"68","line":6,"column":3,"nodeType":"62","messageId":"63","endLine":6,"endColumn":7},{"ruleId":"60","severity":1,"message":"69","line":8,"column":3,"nodeType":"62","messageId":"63","endLine":8,"endColumn":7},{"ruleId":"60","severity":1,"message":"70","line":9,"column":3,"nodeType":"62","messageId":"63","endLine":9,"endColumn":13},{"ruleId":"60","severity":1,"message":"71","line":10,"column":3,"nodeType":"62","messageId":"63","endLine":10,"endColumn":11},{"ruleId":"60","severity":1,"message":"72","line":11,"column":3,"nodeType":"62","messageId":"63","endLine":11,"endColumn":11},{"ruleId":"60","severity":1,"message":"73","line":12,"column":3,"nodeType":"62","messageId":"63","endLine":12,"endColumn":14},{"ruleId":"60","severity":1,"message":"74","line":17,"column":3,"nodeType":"62","messageId":"63","endLine":17,"endColumn":9},{"ruleId":"60","severity":1,"message":"75","line":23,"column":11,"nodeType":"62","messageId":"63","endLine":23,"endColumn":17},{"ruleId":"60","severity":1,"message":"76","line":23,"column":19,"nodeType":"62","messageId":"63","endLine":23,"endColumn":25},{"ruleId":"60","severity":1,"message":"77","line":23,"column":27,"nodeType":"62","messageId":"63","endLine":23,"endColumn":34},{"ruleId":"60","severity":1,"message":"65","line":6,"column":3,"nodeType":"62","messageId":"63","endLine":6,"endColumn":13},{"ruleId":"60","severity":1,"message":"78","line":13,"column":3,"nodeType":"62","messageId":"63","endLine":13,"endColumn":14},{"ruleId":"60","severity":1,"message":"74","line":14,"column":3,"nodeType":"62","messageId":"63","endLine":14,"endColumn":9},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Dump' is defined but never used.","'CardFooter' is defined but never used.","'ReactNode' is defined but never used.","'Avatar' is defined but never used.","'Link' is defined but never used.","'Menu' is defined but never used.","'MenuButton' is defined but never used.","'MenuList' is defined but never used.","'MenuItem' is defined but never used.","'MenuDivider' is defined but never used.","'Center' is defined but never used.","'isOpen' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'onClose' is assigned a value but never used.","'colorScheme' is defined but never used."]